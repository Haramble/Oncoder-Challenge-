1/1 셀프넘버 판별
시간 제한 : 2초메모리 제한 : 256MB

문제 설명
양의 정수 n에 대하여, F(n) = n + n의 각 자리 숫자 로 정의되는 함수가 있습니다.
예를들어 F(12) = 12 + 1 + 2 = 15 입니다.

양의 정수 n에 대하여 한가지 아래와 같은 무한한 수열을 생각해봅시다.
n, F(n), F(F(n)), F(F(F(n))), ...

예를들어 n이 12일때, 12, 15, 21, 24, 30, 33, ... 이렇게 진행됩니다.
위의 수열에서, 12는 15의 생성자이고, 21은 24의 생성자로 정의 합니다.
또한, 어떤 숫자의 생성자는 2개일 수도 있는데 예를들어 101의 생성자는 91과 100이 있습니다.

어떤 숫자는 생성자가 없을수도 있는데, 이 수를 인도의 수학자 D. R. Kaprekar는 "셀프넘버"라고 명명했습니다.
1, 3, 5, 7, 9, 20, 31, 42, 53, 64, 75, 86, 97은 셀프넘버 입니다.

양의 정수 int a가 주어졌을때, int a의 생성자의 개수를 리턴하세요.

참고 / 제약 사항
a는 1이상 1,000이하의 양의정수 입니다.

테스트 케이스
int a = 101 리턴(정답): 2
91과 100 은 101의 생성자 입니다.

int a = 31 리턴(정답): 0
31는 셀프넘버 입니다.

int a = 1000 리턴(정답): 1



코드
//핵심 소스코드의 설명을 주석으로 작성하면 평가에 큰 도움이 됩니다.
class Solution{
public:
    int A[1001];
    bool visit[1001];

    void F(int k, int a){
        visit[k] = true;
        int tmp = k;
        while(tmp!=0){
            k += tmp%10;
            tmp /= 10;
        }
        A[k]++;

        if(k>a || visit[k]) return;
        F(k,a);
    }

    int solution(int a){
        for(int i=1; i<=a; i++){
            A[i] = 0;
            visit[i] = false;
        }

        for(int i=1; i<=a; i++){
            if(!visit[i]) F(i, a);
        }

        return A[a];
    }
};
